
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000704  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033d  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000373  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_1>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  64:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <INT_pins>:
#endif

// configure INT pins as inputs
void INT_pins()
{
	clear_bit(DDRD, 2); //INT0
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8b 7f       	andi	r24, 0xFB	; 251
  70:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRD, 3); //INT1
  72:	81 b3       	in	r24, 0x11	; 17
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	81 bb       	out	0x11, r24	; 17
	clear_bit(DDRB, 2); //INT1
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	87 bb       	out	0x17, r24	; 23
  7e:	08 95       	ret

00000080 <LEDS_pins>:
}

void LEDS_pins()
{
	set_bit(DDRD, 6); // LED2
  80:	81 b3       	in	r24, 0x11	; 17
  82:	80 64       	ori	r24, 0x40	; 64
  84:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, 5); // lED0
  86:	81 b3       	in	r24, 0x11	; 17
  88:	80 62       	ori	r24, 0x20	; 32
  8a:	81 bb       	out	0x11, r24	; 17
	set_bit(DDRD, 7); // LED1
  8c:	81 b3       	in	r24, 0x11	; 17
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	81 bb       	out	0x11, r24	; 17
  92:	08 95       	ret

00000094 <INT_init>:
}

void INT_init()
{
	GICR = 0xE0;
  94:	80 ee       	ldi	r24, 0xE0	; 224
  96:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0x05;
  98:	85 e0       	ldi	r24, 0x05	; 5
  9a:	85 bf       	out	0x35, r24	; 53
  9c:	08 95       	ret

0000009e <main>:
}
int main(void)
{
    INT_pins();
  9e:	0e 94 36 00 	call	0x6c	; 0x6c <INT_pins>
	LEDS_pins();
  a2:	0e 94 40 00 	call	0x80	; 0x80 <LEDS_pins>
	INT_init();
  a6:	0e 94 4a 00 	call	0x94	; 0x94 <INT_init>
	sei();
  aa:	78 94       	sei
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0xe>

000000ae <__vector_1>:
    while (1) ;
    
}

ISR (INT0_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	cli();
  be:	f8 94       	cli
	set_bit(PORTD,5);
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	80 62       	ori	r24, 0x20	; 32
  c4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	2f e7       	ldi	r18, 0x7F	; 127
  c8:	84 e8       	ldi	r24, 0x84	; 132
  ca:	9e e1       	ldi	r25, 0x1E	; 30
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <__vector_1+0x1e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <__vector_1+0x28>
  d6:	00 00       	nop
	_delay_ms(10000);
	clear_bit(PORTD,5);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	8f 7d       	andi	r24, 0xDF	; 223
  dc:	82 bb       	out	0x12, r24	; 18
	sei();
  de:	78 94       	sei
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_2>:

ISR (INT1_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	2f 93       	push	r18
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
	cli();
 100:	f8 94       	cli
	set_bit(PORTD,7);
 102:	82 b3       	in	r24, 0x12	; 18
 104:	80 68       	ori	r24, 0x80	; 128
 106:	82 bb       	out	0x12, r24	; 18
 108:	2f e7       	ldi	r18, 0x7F	; 127
 10a:	84 e8       	ldi	r24, 0x84	; 132
 10c:	9e e1       	ldi	r25, 0x1E	; 30
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <__vector_2+0x1e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__vector_2+0x28>
 118:	00 00       	nop
	_delay_ms(10000);
	clear_bit(PORTD,7);
 11a:	82 b3       	in	r24, 0x12	; 18
 11c:	8f 77       	andi	r24, 0x7F	; 127
 11e:	82 bb       	out	0x12, r24	; 18
	sei();
 120:	78 94       	sei
}
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_3>:

ISR (INT2_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	cli();
 142:	f8 94       	cli
	set_bit(PORTD,6);
 144:	82 b3       	in	r24, 0x12	; 18
 146:	80 64       	ori	r24, 0x40	; 64
 148:	82 bb       	out	0x12, r24	; 18
 14a:	2f e7       	ldi	r18, 0x7F	; 127
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	9e e1       	ldi	r25, 0x1E	; 30
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <__vector_3+0x1e>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_3+0x28>
 15a:	00 00       	nop
	_delay_ms(10000);
	clear_bit(PORTD,6);
 15c:	82 b3       	in	r24, 0x12	; 18
 15e:	8f 7b       	andi	r24, 0xBF	; 191
 160:	82 bb       	out	0x12, r24	; 18
	sei();
 162:	78 94       	sei
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
