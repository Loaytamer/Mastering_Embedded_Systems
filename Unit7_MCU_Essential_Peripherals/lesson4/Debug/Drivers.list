
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cc8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000df8  08000df8  00010df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e28  08000e28  00010e30  2**0
                  CONTENTS
  4 .ARM          00000000  08000e28  08000e28  00010e30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e28  08000e30  00010e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e28  08000e28  00010e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e2c  08000e2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010e30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000e30  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000e30  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010e30  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003e66  00000000  00000000  00010e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000998  00000000  00000000  00014cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009f0  00000000  00000000  00015657  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  00016048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00016208  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000025b5  00000000  00000000  00016370  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002165  00000000  00000000  00018925  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000095a2  00000000  00000000  0001aa8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002402c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000554  00000000  00000000  000240a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000de0 	.word	0x08000de0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000de0 	.word	0x08000de0

08000170 <custom_delay>:
#include "LCD.h"

GPIO_pinConfig_t pinConfig;

void custom_delay(int x)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8_t i,j;
	for(i = 0; i < x; i++)
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
 800017c:	e00b      	b.n	8000196 <custom_delay+0x26>
		for(j = 0; j < 255; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	73bb      	strb	r3, [r7, #14]
 8000182:	e002      	b.n	800018a <custom_delay+0x1a>
 8000184:	7bbb      	ldrb	r3, [r7, #14]
 8000186:	3301      	adds	r3, #1
 8000188:	73bb      	strb	r3, [r7, #14]
 800018a:	7bbb      	ldrb	r3, [r7, #14]
 800018c:	2bff      	cmp	r3, #255	; 0xff
 800018e:	d1f9      	bne.n	8000184 <custom_delay+0x14>
	for(i = 0; i < x; i++)
 8000190:	7bfb      	ldrb	r3, [r7, #15]
 8000192:	3301      	adds	r3, #1
 8000194:	73fb      	strb	r3, [r7, #15]
 8000196:	7bfb      	ldrb	r3, [r7, #15]
 8000198:	687a      	ldr	r2, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	dcef      	bgt.n	800017e <custom_delay+0xe>
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <LCD_INIT>:
		        It typically involves setting the display mode (e.g., 4-bit or 8-bit interface),
			    enabling display and backlight (if applicable),and configuring other initial parameters.
 * @param[in] - None 
 * @retval    - None
 */
void LCD_INIT(void){
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	custom_delay(20);
 80001ac:	2014      	movs	r0, #20
 80001ae:	f7ff ffdf 	bl	8000170 <custom_delay>
	//LCD Port is o/p
	pinConfig.GPIO_pinNumber    = GPIO_PIN_0;
 80001b2:	4b5b      	ldr	r3, [pc, #364]	; (8000320 <LCD_INIT+0x178>)
 80001b4:	2201      	movs	r2, #1
 80001b6:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80001b8:	4b59      	ldr	r3, [pc, #356]	; (8000320 <LCD_INIT+0x178>)
 80001ba:	2205      	movs	r2, #5
 80001bc:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 80001be:	4b58      	ldr	r3, [pc, #352]	; (8000320 <LCD_INIT+0x178>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &pinConfig);
 80001c4:	4956      	ldr	r1, [pc, #344]	; (8000320 <LCD_INIT+0x178>)
 80001c6:	4857      	ldr	r0, [pc, #348]	; (8000324 <LCD_INIT+0x17c>)
 80001c8:	f000 fc9a 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = GPIO_PIN_1;
 80001cc:	4b54      	ldr	r3, [pc, #336]	; (8000320 <LCD_INIT+0x178>)
 80001ce:	2202      	movs	r2, #2
 80001d0:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80001d2:	4b53      	ldr	r3, [pc, #332]	; (8000320 <LCD_INIT+0x178>)
 80001d4:	2205      	movs	r2, #5
 80001d6:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 80001d8:	4b51      	ldr	r3, [pc, #324]	; (8000320 <LCD_INIT+0x178>)
 80001da:	2201      	movs	r2, #1
 80001dc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &pinConfig);
 80001de:	4950      	ldr	r1, [pc, #320]	; (8000320 <LCD_INIT+0x178>)
 80001e0:	4850      	ldr	r0, [pc, #320]	; (8000324 <LCD_INIT+0x17c>)
 80001e2:	f000 fc8d 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = GPIO_PIN_2;
 80001e6:	4b4e      	ldr	r3, [pc, #312]	; (8000320 <LCD_INIT+0x178>)
 80001e8:	2204      	movs	r2, #4
 80001ea:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80001ec:	4b4c      	ldr	r3, [pc, #304]	; (8000320 <LCD_INIT+0x178>)
 80001ee:	2205      	movs	r2, #5
 80001f0:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 80001f2:	4b4b      	ldr	r3, [pc, #300]	; (8000320 <LCD_INIT+0x178>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &pinConfig);
 80001f8:	4949      	ldr	r1, [pc, #292]	; (8000320 <LCD_INIT+0x178>)
 80001fa:	484a      	ldr	r0, [pc, #296]	; (8000324 <LCD_INIT+0x17c>)
 80001fc:	f000 fc80 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = GPIO_PIN_3;
 8000200:	4b47      	ldr	r3, [pc, #284]	; (8000320 <LCD_INIT+0x178>)
 8000202:	2208      	movs	r2, #8
 8000204:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000206:	4b46      	ldr	r3, [pc, #280]	; (8000320 <LCD_INIT+0x178>)
 8000208:	2205      	movs	r2, #5
 800020a:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 800020c:	4b44      	ldr	r3, [pc, #272]	; (8000320 <LCD_INIT+0x178>)
 800020e:	2201      	movs	r2, #1
 8000210:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &pinConfig);
 8000212:	4943      	ldr	r1, [pc, #268]	; (8000320 <LCD_INIT+0x178>)
 8000214:	4843      	ldr	r0, [pc, #268]	; (8000324 <LCD_INIT+0x17c>)
 8000216:	f000 fc73 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = GPIO_PIN_4;
 800021a:	4b41      	ldr	r3, [pc, #260]	; (8000320 <LCD_INIT+0x178>)
 800021c:	2210      	movs	r2, #16
 800021e:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000220:	4b3f      	ldr	r3, [pc, #252]	; (8000320 <LCD_INIT+0x178>)
 8000222:	2205      	movs	r2, #5
 8000224:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 8000226:	4b3e      	ldr	r3, [pc, #248]	; (8000320 <LCD_INIT+0x178>)
 8000228:	2201      	movs	r2, #1
 800022a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &pinConfig);
 800022c:	493c      	ldr	r1, [pc, #240]	; (8000320 <LCD_INIT+0x178>)
 800022e:	483d      	ldr	r0, [pc, #244]	; (8000324 <LCD_INIT+0x17c>)
 8000230:	f000 fc66 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = GPIO_PIN_5;
 8000234:	4b3a      	ldr	r3, [pc, #232]	; (8000320 <LCD_INIT+0x178>)
 8000236:	2220      	movs	r2, #32
 8000238:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 800023a:	4b39      	ldr	r3, [pc, #228]	; (8000320 <LCD_INIT+0x178>)
 800023c:	2205      	movs	r2, #5
 800023e:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 8000240:	4b37      	ldr	r3, [pc, #220]	; (8000320 <LCD_INIT+0x178>)
 8000242:	2201      	movs	r2, #1
 8000244:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &pinConfig);
 8000246:	4936      	ldr	r1, [pc, #216]	; (8000320 <LCD_INIT+0x178>)
 8000248:	4836      	ldr	r0, [pc, #216]	; (8000324 <LCD_INIT+0x17c>)
 800024a:	f000 fc59 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = GPIO_PIN_6;
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <LCD_INIT+0x178>)
 8000250:	2240      	movs	r2, #64	; 0x40
 8000252:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 8000254:	4b32      	ldr	r3, [pc, #200]	; (8000320 <LCD_INIT+0x178>)
 8000256:	2205      	movs	r2, #5
 8000258:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 800025a:	4b31      	ldr	r3, [pc, #196]	; (8000320 <LCD_INIT+0x178>)
 800025c:	2201      	movs	r2, #1
 800025e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &pinConfig);
 8000260:	492f      	ldr	r1, [pc, #188]	; (8000320 <LCD_INIT+0x178>)
 8000262:	4830      	ldr	r0, [pc, #192]	; (8000324 <LCD_INIT+0x17c>)
 8000264:	f000 fc4c 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = GPIO_PIN_7;
 8000268:	4b2d      	ldr	r3, [pc, #180]	; (8000320 <LCD_INIT+0x178>)
 800026a:	2280      	movs	r2, #128	; 0x80
 800026c:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 800026e:	4b2c      	ldr	r3, [pc, #176]	; (8000320 <LCD_INIT+0x178>)
 8000270:	2205      	movs	r2, #5
 8000272:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 8000274:	4b2a      	ldr	r3, [pc, #168]	; (8000320 <LCD_INIT+0x178>)
 8000276:	2201      	movs	r2, #1
 8000278:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &pinConfig);
 800027a:	4929      	ldr	r1, [pc, #164]	; (8000320 <LCD_INIT+0x178>)
 800027c:	4829      	ldr	r0, [pc, #164]	; (8000324 <LCD_INIT+0x17c>)
 800027e:	f000 fc3f 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = RS;
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <LCD_INIT+0x178>)
 8000284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000288:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 800028a:	4b25      	ldr	r3, [pc, #148]	; (8000320 <LCD_INIT+0x178>)
 800028c:	2205      	movs	r2, #5
 800028e:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 8000290:	4b23      	ldr	r3, [pc, #140]	; (8000320 <LCD_INIT+0x178>)
 8000292:	2201      	movs	r2, #1
 8000294:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinConfig);
 8000296:	4922      	ldr	r1, [pc, #136]	; (8000320 <LCD_INIT+0x178>)
 8000298:	4822      	ldr	r0, [pc, #136]	; (8000324 <LCD_INIT+0x17c>)
 800029a:	f000 fc31 	bl	8000b00 <MCAL_GPIO_Init>
	pinConfig.GPIO_pinNumber    = RW;
 800029e:	4b20      	ldr	r3, [pc, #128]	; (8000320 <LCD_INIT+0x178>)
 80002a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002a4:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <LCD_INIT+0x178>)
 80002a8:	2205      	movs	r2, #5
 80002aa:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 80002ac:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <LCD_INIT+0x178>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinConfig);
 80002b2:	491b      	ldr	r1, [pc, #108]	; (8000320 <LCD_INIT+0x178>)
 80002b4:	481b      	ldr	r0, [pc, #108]	; (8000324 <LCD_INIT+0x17c>)
 80002b6:	f000 fc23 	bl	8000b00 <MCAL_GPIO_Init>

	pinConfig.GPIO_pinNumber    = EN;
 80002ba:	4b19      	ldr	r3, [pc, #100]	; (8000320 <LCD_INIT+0x178>)
 80002bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002c0:	801a      	strh	r2, [r3, #0]
	pinConfig.GPIO_MODE         = GPIO_MODE_OUTPUT_PP;
 80002c2:	4b17      	ldr	r3, [pc, #92]	; (8000320 <LCD_INIT+0x178>)
 80002c4:	2205      	movs	r2, #5
 80002c6:	709a      	strb	r2, [r3, #2]
	pinConfig.GPIO_Output_Speed = GPIO_MODE_10MHZ;
 80002c8:	4b15      	ldr	r3, [pc, #84]	; (8000320 <LCD_INIT+0x178>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &pinConfig);
 80002ce:	4914      	ldr	r1, [pc, #80]	; (8000320 <LCD_INIT+0x178>)
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <LCD_INIT+0x17c>)
 80002d2:	f000 fc15 	bl	8000b00 <MCAL_GPIO_Init>

	// reset control pins
	MCAL_GPIO_WritePin(LCD_CTRL, RS, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002dc:	4811      	ldr	r0, [pc, #68]	; (8000324 <LCD_INIT+0x17c>)
 80002de:	f000 fc8d 	bl	8000bfc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002e8:	480e      	ldr	r0, [pc, #56]	; (8000324 <LCD_INIT+0x17c>)
 80002ea:	f000 fc87 	bl	8000bfc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, EN, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f4:	480b      	ldr	r0, [pc, #44]	; (8000324 <LCD_INIT+0x17c>)
 80002f6:	f000 fc81 	bl	8000bfc <MCAL_GPIO_WritePin>

	custom_delay(15);
 80002fa:	200f      	movs	r0, #15
 80002fc:	f7ff ff38 	bl	8000170 <custom_delay>
	LCD_Clear_screen();
 8000300:	f000 f888 	bl	8000414 <LCD_Clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_write_command(LCD_FUNCTION_8BIT_2LINES);
 8000304:	2038      	movs	r0, #56	; 0x38
 8000306:	f000 f80f 	bl	8000328 <LCD_write_command>
	/*#ifdef FOUR_BIT_MODE
	LCD_write_command(LCD_FUNCTION_4BIT_2LINES);
	LCD_write_command(0x02);
	#endif*/

	LCD_write_command(LCD_DISP_ON_CURSOR_BLINK);
 800030a:	200f      	movs	r0, #15
 800030c:	f000 f80c 	bl	8000328 <LCD_write_command>
	LCD_write_command(LCD_BEGIN_AT_FIRST_ROW);
 8000310:	2080      	movs	r0, #128	; 0x80
 8000312:	f000 f809 	bl	8000328 <LCD_write_command>
	LCD_write_command(LCD_ENTRY_MODE);
 8000316:	2006      	movs	r0, #6
 8000318:	f000 f806 	bl	8000328 <LCD_write_command>
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	2000001c 	.word	0x2000001c
 8000324:	40010800 	.word	0x40010800

08000328 <LCD_write_command>:
			    setting cursor position, configuring display mode, and more.
 * @param[in] - cmd (unsigned char): The command byte to be sent to the LCD.
 * @retval    - None
 * @Note	  - The LCD controller might require specific timings or control signals for sending commands.
 */
void LCD_write_command(unsigned char cmd){
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	//set command and write mode
	MCAL_GPIO_WritePin(LCD_CTRL, RS, GPIO_PIN_RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000338:	480b      	ldr	r0, [pc, #44]	; (8000368 <LCD_write_command+0x40>)
 800033a:	f000 fc5f 	bl	8000bfc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW, GPIO_PIN_RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000344:	4808      	ldr	r0, [pc, #32]	; (8000368 <LCD_write_command+0x40>)
 8000346:	f000 fc59 	bl	8000bfc <MCAL_GPIO_WritePin>
	#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_PORT, cmd);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	b29b      	uxth	r3, r3
 800034e:	4619      	mov	r1, r3
 8000350:	4805      	ldr	r0, [pc, #20]	; (8000368 <LCD_write_command+0x40>)
 8000352:	f000 fc71 	bl	8000c38 <MCAL_GPIO_WritePort>
	custom_delay(1);
 8000356:	2001      	movs	r0, #1
 8000358:	f7ff ff0a 	bl	8000170 <custom_delay>
	LCD_kick();
 800035c:	f000 f862 	bl	8000424 <LCD_kick>
		LCD_PORT  = (LCD_PORT & 0X0F) | (cmd & 0XF0); // write MSBs of cmd
		LCD_kick();
		LCD_PORT  = (LCD_PORT & 0X0F) | (cmd << 4 );  // write LSBs of cmd
		LCD_kick();
	#endif*/
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40010800 	.word	0x40010800

0800036c <LCD_write_data>:
 * @details   - Data bytes represent the actual characters or symbols that appear on the display. This function sends them to the LCD for rendering.
 * @param[in] - data (unsigned char): The data byte to be written to the LCD.
 * @retval    - None
 * @Note���   - Similar to `LCD_write_command`, timing requirements or control signals might be necessary.
 */
void LCD_write_data(unsigned char data){
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
	#ifdef EIGHT_BIT_MODE
	MCAL_GPIO_WritePort(LCD_PORT, data);
 8000376:	79fb      	ldrb	r3, [r7, #7]
 8000378:	b29b      	uxth	r3, r3
 800037a:	4619      	mov	r1, r3
 800037c:	480b      	ldr	r0, [pc, #44]	; (80003ac <LCD_write_data+0x40>)
 800037e:	f000 fc5b 	bl	8000c38 <MCAL_GPIO_WritePort>
	#endif
	MCAL_GPIO_WritePin(LCD_CTRL, RW, GPIO_PIN_RESET); //write mode
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000388:	4808      	ldr	r0, [pc, #32]	; (80003ac <LCD_write_data+0x40>)
 800038a:	f000 fc37 	bl	8000bfc <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS, GPIO_PIN_SET); //set data mode
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000394:	4805      	ldr	r0, [pc, #20]	; (80003ac <LCD_write_data+0x40>)
 8000396:	f000 fc31 	bl	8000bfc <MCAL_GPIO_WritePin>
	custom_delay(1);
 800039a:	2001      	movs	r0, #1
 800039c:	f7ff fee8 	bl	8000170 <custom_delay>
	LCD_kick();
 80003a0:	f000 f840 	bl	8000424 <LCD_kick>
		LCD_PORT  = (LCD_PORT & 0X0F) | (data & 0XF0); // write MSBs of data
		LCD_kick();
		LCD_PORT  = (LCD_PORT & 0X0F) | (data << 4 );  // write LSBs of data
		LCD_kick();
	#endif*/
}
 80003a4:	bf00      	nop
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40010800 	.word	0x40010800

080003b0 <LCD_write_string>:
 * @details   - This function iterates through the provided string, sending each character (data byte) to the LCD using `LCD_write_data` for efficient display.
 * @param[in] - string (char*): A pointer to a null-terminated character array containing the string to be displayed.
 * @retval    - None
 * @Note      - Ensure the string length doesn't exceed the LCD's display capacity.
 */
void LCD_write_string(char* string){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	int counter = 0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
	while (*string){
 80003bc:	e022      	b.n	8000404 <LCD_write_string+0x54>
		counter++;
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3301      	adds	r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
		LCD_write_data(*string++);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ffcd 	bl	800036c <LCD_write_data>
		if(counter == 16)
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	2b10      	cmp	r3, #16
 80003d6:	d108      	bne.n	80003ea <LCD_write_string+0x3a>
		{
			LCD_GOTO_XY(2, counter-16); //go to second line at first position
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	3b10      	subs	r3, #16
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4619      	mov	r1, r3
 80003e2:	2002      	movs	r0, #2
 80003e4:	f000 f834 	bl	8000450 <LCD_GOTO_XY>
 80003e8:	e00c      	b.n	8000404 <LCD_write_string+0x54>
		}
		else if(counter == 32)
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	2b20      	cmp	r3, #32
 80003ee:	d109      	bne.n	8000404 <LCD_write_string+0x54>
		{
			LCD_Clear_screen();
 80003f0:	f000 f810 	bl	8000414 <LCD_Clear_screen>
			counter = 0;
 80003f4:	2300      	movs	r3, #0
 80003f6:	60fb      	str	r3, [r7, #12]
			LCD_GOTO_XY(1, counter); //go to first line at first position
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	4619      	mov	r1, r3
 80003fe:	2001      	movs	r0, #1
 8000400:	f000 f826 	bl	8000450 <LCD_GOTO_XY>
	while (*string){
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d1d8      	bne.n	80003be <LCD_write_string+0xe>

		}
	}
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <LCD_Clear_screen>:
 * @brief��   - Clears the entire LCD display and positions the cursor at the home position (usually top-left corner).
 * @details   - This function sends the appropriate command to the LCD controller to erase all displayed content and typically resets the cursor to its default location.
 * @param[in] - None
 * @retval    - None
 */
void LCD_Clear_screen(void){
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	LCD_write_command(LCD_CLEAR_SCREEN);
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff85 	bl	8000328 <LCD_write_command>
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <LCD_kick>:
 *				 3. (Optional) Clearing the control signal(s) to disable further commands or data until the next `LCD_kick` or a separate enabling mechanism is used.
 * @param[in] - None 
 * @retval    - None
 * @Note      - The specific control signals and timing requirements depend on the LCD controller. 
 */
void LCD_kick(void){
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN, GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042e:	4807      	ldr	r0, [pc, #28]	; (800044c <LCD_kick+0x28>)
 8000430:	f000 fbe4 	bl	8000bfc <MCAL_GPIO_WritePin>
	custom_delay(50);
 8000434:	2032      	movs	r0, #50	; 0x32
 8000436:	f7ff fe9b 	bl	8000170 <custom_delay>
	MCAL_GPIO_WritePin(LCD_CTRL, EN, GPIO_PIN_RESET);
 800043a:	2200      	movs	r2, #0
 800043c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <LCD_kick+0x28>)
 8000442:	f000 fbdb 	bl	8000bfc <MCAL_GPIO_WritePin>
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40010800 	.word	0x40010800

08000450 <LCD_GOTO_XY>:
 * @param[in] - line (unsigned char): The desired row (line) number on the LCD (zero-based indexing is common).
 * @param[in] - position (unsigned char): The desired column (position) within the row (zero-based indexing is common).
 * @retval    - None
 * @Note      - The exact range
 */
void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	460a      	mov	r2, r1
 800045a:	71fb      	strb	r3, [r7, #7]
 800045c:	4613      	mov	r3, r2
 800045e:	71bb      	strb	r3, [r7, #6]
	//Ensure that position is in allowed range
	if (position < 16 && position >= 0){
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	2b0f      	cmp	r3, #15
 8000464:	d812      	bhi.n	800048c <LCD_GOTO_XY+0x3c>
		if(line == 1)
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b01      	cmp	r3, #1
 800046a:	d106      	bne.n	800047a <LCD_GOTO_XY+0x2a>
			LCD_write_command(LCD_BEGIN_AT_FIRST_ROW + position);
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	3b80      	subs	r3, #128	; 0x80
 8000470:	b2db      	uxtb	r3, r3
 8000472:	4618      	mov	r0, r3
 8000474:	f7ff ff58 	bl	8000328 <LCD_write_command>
		else if(line == 2)
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW + position);
	}
}
 8000478:	e008      	b.n	800048c <LCD_GOTO_XY+0x3c>
		else if(line == 2)
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	2b02      	cmp	r3, #2
 800047e:	d105      	bne.n	800048c <LCD_GOTO_XY+0x3c>
			LCD_write_command(LCD_BEGIN_AT_SECOND_ROW + position);
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	3b40      	subs	r3, #64	; 0x40
 8000484:	b2db      	uxtb	r3, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff4e 	bl	8000328 <LCD_write_command>
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <Enable_NVIC>:
/*========== Generic Macros ==========*/
void(*GP_IRQ_CallBack[15])(void);


/*========== Generic Functions ==========*/
void Enable_NVIC(uint16_t IRQ){
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800049e:	88fb      	ldrh	r3, [r7, #6]
 80004a0:	2b0f      	cmp	r3, #15
 80004a2:	d854      	bhi.n	800054e <Enable_NVIC+0xba>
 80004a4:	a201      	add	r2, pc, #4	; (adr r2, 80004ac <Enable_NVIC+0x18>)
 80004a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004aa:	bf00      	nop
 80004ac:	080004ed 	.word	0x080004ed
 80004b0:	080004fb 	.word	0x080004fb
 80004b4:	08000509 	.word	0x08000509
 80004b8:	08000517 	.word	0x08000517
 80004bc:	08000525 	.word	0x08000525
 80004c0:	08000533 	.word	0x08000533
 80004c4:	08000533 	.word	0x08000533
 80004c8:	08000533 	.word	0x08000533
 80004cc:	08000533 	.word	0x08000533
 80004d0:	08000533 	.word	0x08000533
 80004d4:	08000541 	.word	0x08000541
 80004d8:	08000541 	.word	0x08000541
 80004dc:	08000541 	.word	0x08000541
 80004e0:	08000541 	.word	0x08000541
 80004e4:	08000541 	.word	0x08000541
 80004e8:	08000541 	.word	0x08000541
	case 0:
		NVIC_IRQ6_EXTI0_Enable();
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <Enable_NVIC+0xc4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a19      	ldr	r2, [pc, #100]	; (8000558 <Enable_NVIC+0xc4>)
 80004f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004f6:	6013      	str	r3, [r2, #0]
		break;
 80004f8:	e029      	b.n	800054e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable();
 80004fa:	4b17      	ldr	r3, [pc, #92]	; (8000558 <Enable_NVIC+0xc4>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a16      	ldr	r2, [pc, #88]	; (8000558 <Enable_NVIC+0xc4>)
 8000500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000504:	6013      	str	r3, [r2, #0]
		break;
 8000506:	e022      	b.n	800054e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable();
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <Enable_NVIC+0xc4>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <Enable_NVIC+0xc4>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
		break;
 8000514:	e01b      	b.n	800054e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable();
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <Enable_NVIC+0xc4>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0f      	ldr	r2, [pc, #60]	; (8000558 <Enable_NVIC+0xc4>)
 800051c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000520:	6013      	str	r3, [r2, #0]
		break;
 8000522:	e014      	b.n	800054e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable();
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <Enable_NVIC+0xc4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <Enable_NVIC+0xc4>)
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
		break;
 8000530:	e00d      	b.n	800054e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable();
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <Enable_NVIC+0xc4>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a08      	ldr	r2, [pc, #32]	; (8000558 <Enable_NVIC+0xc4>)
 8000538:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800053c:	6013      	str	r3, [r2, #0]
		break;
 800053e:	e006      	b.n	800054e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable();
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <Enable_NVIC+0xc8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a05      	ldr	r2, [pc, #20]	; (800055c <Enable_NVIC+0xc8>)
 8000546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054a:	6013      	str	r3, [r2, #0]
		break;
 800054c:	bf00      	nop
	}
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	e000e100 	.word	0xe000e100
 800055c:	e000e104 	.word	0xe000e104

08000560 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ){
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d854      	bhi.n	800061a <Disable_NVIC+0xba>
 8000570:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <Disable_NVIC+0x18>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	080005b9 	.word	0x080005b9
 800057c:	080005c7 	.word	0x080005c7
 8000580:	080005d5 	.word	0x080005d5
 8000584:	080005e3 	.word	0x080005e3
 8000588:	080005f1 	.word	0x080005f1
 800058c:	080005ff 	.word	0x080005ff
 8000590:	080005ff 	.word	0x080005ff
 8000594:	080005ff 	.word	0x080005ff
 8000598:	080005ff 	.word	0x080005ff
 800059c:	080005ff 	.word	0x080005ff
 80005a0:	0800060d 	.word	0x0800060d
 80005a4:	0800060d 	.word	0x0800060d
 80005a8:	0800060d 	.word	0x0800060d
 80005ac:	0800060d 	.word	0x0800060d
 80005b0:	0800060d 	.word	0x0800060d
 80005b4:	0800060d 	.word	0x0800060d
	case 0:
		NVIC_IRQ6_EXTI0_Disable();
 80005b8:	4b1a      	ldr	r3, [pc, #104]	; (8000624 <Disable_NVIC+0xc4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <Disable_NVIC+0xc4>)
 80005be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c2:	6013      	str	r3, [r2, #0]
		break;
 80005c4:	e029      	b.n	800061a <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable();
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <Disable_NVIC+0xc4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a16      	ldr	r2, [pc, #88]	; (8000624 <Disable_NVIC+0xc4>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d0:	6013      	str	r3, [r2, #0]
		break;
 80005d2:	e022      	b.n	800061a <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable();
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <Disable_NVIC+0xc4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <Disable_NVIC+0xc4>)
 80005da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005de:	6013      	str	r3, [r2, #0]
		break;
 80005e0:	e01b      	b.n	800061a <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable();
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <Disable_NVIC+0xc4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <Disable_NVIC+0xc4>)
 80005e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ec:	6013      	str	r3, [r2, #0]
		break;
 80005ee:	e014      	b.n	800061a <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable();
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <Disable_NVIC+0xc4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a0b      	ldr	r2, [pc, #44]	; (8000624 <Disable_NVIC+0xc4>)
 80005f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fa:	6013      	str	r3, [r2, #0]
		break;
 80005fc:	e00d      	b.n	800061a <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable();
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <Disable_NVIC+0xc4>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <Disable_NVIC+0xc4>)
 8000604:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000608:	6013      	str	r3, [r2, #0]
		break;
 800060a:	e006      	b.n	800061a <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable();
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <Disable_NVIC+0xc8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a05      	ldr	r2, [pc, #20]	; (8000628 <Disable_NVIC+0xc8>)
 8000612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000616:	6013      	str	r3, [r2, #0]
		break;
 8000618:	bf00      	nop
	}
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr
 8000624:	e000e180 	.word	0xe000e180
 8000628:	e000e184 	.word	0xe000e184

0800062c <Update_EXTI>:

void Update_EXTI(EXTI_PinConfig_t* EXTI_Config){
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	// 1- configure GPIO to be AF => floating input
	GPIO_pinConfig_t PinCfg;
	PinCfg.GPIO_pinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	891b      	ldrh	r3, [r3, #8]
 8000638:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE	  = GPIO_MODE_INPUT_FLO;
 800063a:	2301      	movs	r3, #1
 800063c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_port, &PinCfg);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	f107 0208 	add.w	r2, r7, #8
 8000646:	4611      	mov	r1, r2
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fa59 	bl	8000b00 <MCAL_GPIO_Init>

	// 2- update AFIO to route between EXTI line with Port A,B,C,D
	uint8_t AFIO_EXTICR_index, AFIO_EXTICR_position;
	AFIO_EXTICR_index    = ((EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) / 4);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	089b      	lsrs	r3, r3, #2
 8000654:	b29b      	uxth	r3, r3
 8000656:	73fb      	strb	r3, [r7, #15]
	AFIO_EXTICR_position = (((EXTI_Config->EXTI_PIN.EXTI_InputLineNumber) % 4) * 4);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	73bb      	strb	r3, [r7, #14]

	// clear 4 bits
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 8000668:	4a5f      	ldr	r2, [pc, #380]	; (80007e8 <Update_EXTI+0x1bc>)
 800066a:	7bfb      	ldrb	r3, [r7, #15]
 800066c:	3302      	adds	r3, #2
 800066e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000672:	7bbb      	ldrb	r3, [r7, #14]
 8000674:	210f      	movs	r1, #15
 8000676:	fa01 f303 	lsl.w	r3, r1, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	4618      	mov	r0, r3
 800067e:	495a      	ldr	r1, [pc, #360]	; (80007e8 <Update_EXTI+0x1bc>)
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	4002      	ands	r2, r0
 8000684:	3302      	adds	r3, #2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |=  ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_port) & (0xF))<< AFIO_EXTICR_position);
 800068a:	4a57      	ldr	r2, [pc, #348]	; (80007e8 <Update_EXTI+0x1bc>)
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	3302      	adds	r3, #2
 8000690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4954      	ldr	r1, [pc, #336]	; (80007ec <Update_EXTI+0x1c0>)
 800069a:	428b      	cmp	r3, r1
 800069c:	d016      	beq.n	80006cc <Update_EXTI+0xa0>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4953      	ldr	r1, [pc, #332]	; (80007f0 <Update_EXTI+0x1c4>)
 80006a4:	428b      	cmp	r3, r1
 80006a6:	d00f      	beq.n	80006c8 <Update_EXTI+0x9c>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	4951      	ldr	r1, [pc, #324]	; (80007f4 <Update_EXTI+0x1c8>)
 80006ae:	428b      	cmp	r3, r1
 80006b0:	d008      	beq.n	80006c4 <Update_EXTI+0x98>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	4950      	ldr	r1, [pc, #320]	; (80007f8 <Update_EXTI+0x1cc>)
 80006b8:	428b      	cmp	r3, r1
 80006ba:	d101      	bne.n	80006c0 <Update_EXTI+0x94>
 80006bc:	2303      	movs	r3, #3
 80006be:	e006      	b.n	80006ce <Update_EXTI+0xa2>
 80006c0:	2300      	movs	r3, #0
 80006c2:	e004      	b.n	80006ce <Update_EXTI+0xa2>
 80006c4:	2302      	movs	r3, #2
 80006c6:	e002      	b.n	80006ce <Update_EXTI+0xa2>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <Update_EXTI+0xa2>
 80006cc:	2300      	movs	r3, #0
 80006ce:	7bb9      	ldrb	r1, [r7, #14]
 80006d0:	408b      	lsls	r3, r1
 80006d2:	4618      	mov	r0, r3
 80006d4:	4944      	ldr	r1, [pc, #272]	; (80007e8 <Update_EXTI+0x1bc>)
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	4302      	orrs	r2, r0
 80006da:	3302      	adds	r3, #2
 80006dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// 3- configure Trigger case
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006e0:	4b46      	ldr	r3, [pc, #280]	; (80007fc <Update_EXTI+0x1d0>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	8812      	ldrh	r2, [r2, #0]
 80006e8:	4611      	mov	r1, r2
 80006ea:	2201      	movs	r2, #1
 80006ec:	408a      	lsls	r2, r1
 80006ee:	43d2      	mvns	r2, r2
 80006f0:	4611      	mov	r1, r2
 80006f2:	4a42      	ldr	r2, [pc, #264]	; (80007fc <Update_EXTI+0x1d0>)
 80006f4:	400b      	ands	r3, r1
 80006f6:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80006f8:	4b40      	ldr	r3, [pc, #256]	; (80007fc <Update_EXTI+0x1d0>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	8812      	ldrh	r2, [r2, #0]
 8000700:	4611      	mov	r1, r2
 8000702:	2201      	movs	r2, #1
 8000704:	408a      	lsls	r2, r1
 8000706:	43d2      	mvns	r2, r2
 8000708:	4611      	mov	r1, r2
 800070a:	4a3c      	ldr	r2, [pc, #240]	; (80007fc <Update_EXTI+0x1d0>)
 800070c:	400b      	ands	r3, r1
 800070e:	60d3      	str	r3, [r2, #12]
	if(EXTI_Config->Trigger_Case == EXTI_Trigger_Rising){
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7b1b      	ldrb	r3, [r3, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d10b      	bne.n	8000730 <Update_EXTI+0x104>
		EXTI->RTSR |=  (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000718:	4b38      	ldr	r3, [pc, #224]	; (80007fc <Update_EXTI+0x1d0>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	8812      	ldrh	r2, [r2, #0]
 8000720:	4611      	mov	r1, r2
 8000722:	2201      	movs	r2, #1
 8000724:	408a      	lsls	r2, r1
 8000726:	4611      	mov	r1, r2
 8000728:	4a34      	ldr	r2, [pc, #208]	; (80007fc <Update_EXTI+0x1d0>)
 800072a:	430b      	orrs	r3, r1
 800072c:	6093      	str	r3, [r2, #8]
 800072e:	e029      	b.n	8000784 <Update_EXTI+0x158>
	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_Falling){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7b1b      	ldrb	r3, [r3, #12]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d10b      	bne.n	8000750 <Update_EXTI+0x124>
		EXTI->FTSR |=  (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <Update_EXTI+0x1d0>)
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	8812      	ldrh	r2, [r2, #0]
 8000740:	4611      	mov	r1, r2
 8000742:	2201      	movs	r2, #1
 8000744:	408a      	lsls	r2, r1
 8000746:	4611      	mov	r1, r2
 8000748:	4a2c      	ldr	r2, [pc, #176]	; (80007fc <Update_EXTI+0x1d0>)
 800074a:	430b      	orrs	r3, r1
 800074c:	60d3      	str	r3, [r2, #12]
 800074e:	e019      	b.n	8000784 <Update_EXTI+0x158>
	}else if(EXTI_Config->Trigger_Case == EXTI_Trigger_AnyChange){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	7b1b      	ldrb	r3, [r3, #12]
 8000754:	2b02      	cmp	r3, #2
 8000756:	d115      	bne.n	8000784 <Update_EXTI+0x158>
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <Update_EXTI+0x1d0>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	8812      	ldrh	r2, [r2, #0]
 8000760:	4611      	mov	r1, r2
 8000762:	2201      	movs	r2, #1
 8000764:	408a      	lsls	r2, r1
 8000766:	4611      	mov	r1, r2
 8000768:	4a24      	ldr	r2, [pc, #144]	; (80007fc <Update_EXTI+0x1d0>)
 800076a:	430b      	orrs	r3, r1
 800076c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <Update_EXTI+0x1d0>)
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	8812      	ldrh	r2, [r2, #0]
 8000776:	4611      	mov	r1, r2
 8000778:	2201      	movs	r2, #1
 800077a:	408a      	lsls	r2, r1
 800077c:	4611      	mov	r1, r2
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <Update_EXTI+0x1d0>)
 8000780:	430b      	orrs	r3, r1
 8000782:	60d3      	str	r3, [r2, #12]
	}


	// 4- Update IRQ Handling CallBack
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	4619      	mov	r1, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	691b      	ldr	r3, [r3, #16]
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <Update_EXTI+0x1d4>)
 8000790:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// 5- Enable/Disable IRQ & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_Enable){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	7b5b      	ldrb	r3, [r3, #13]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d110      	bne.n	80007be <Update_EXTI+0x192>
		EXTI->IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <Update_EXTI+0x1d0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	8812      	ldrh	r2, [r2, #0]
 80007a4:	4611      	mov	r1, r2
 80007a6:	2201      	movs	r2, #1
 80007a8:	408a      	lsls	r2, r1
 80007aa:	4611      	mov	r1, r2
 80007ac:	4a13      	ldr	r2, [pc, #76]	; (80007fc <Update_EXTI+0x1d0>)
 80007ae:	430b      	orrs	r3, r1
 80007b0:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fe6c 	bl	8000494 <Enable_NVIC>
	}else{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
	}
}
 80007bc:	e010      	b.n	80007e0 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <Update_EXTI+0x1d0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	8812      	ldrh	r2, [r2, #0]
 80007c6:	4611      	mov	r1, r2
 80007c8:	2201      	movs	r2, #1
 80007ca:	408a      	lsls	r2, r1
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <Update_EXTI+0x1d0>)
 80007d2:	400b      	ands	r3, r1
 80007d4:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLineNumber);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff fec0 	bl	8000560 <Disable_NVIC>
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40010000 	.word	0x40010000
 80007ec:	40010800 	.word	0x40010800
 80007f0:	40010c00 	.word	0x40010c00
 80007f4:	40011000 	.word	0x40011000
 80007f8:	40011400 	.word	0x40011400
 80007fc:	40010400 	.word	0x40010400
 8000800:	20000020 	.word	0x20000020

08000804 <MCAL_EXTI_Init>:
 * @retval     - None
 * @Note       - This function configures the EXTI subsystem to handle external interrupts on the specified pin.
 *               The configuration details are provided in the EXTI_PinConfig_t structure.
 *               It's mandatory to Enable RCC clock for AFIO and the corresponding GPIO.
 *******************************************************************************/
void MCAL_EXTI_Init(EXTI_PinConfig_t* EXTI_Config){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff ff0d 	bl	800062c <Update_EXTI>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <EXTI0_IRQHandler>:
void MCAL_EXTI_Update(EXTI_PinConfig_t* EXTI_Config){
	Update_EXTI(EXTI_Config);
}

/*========== ISRs ==========*/
void EXTI0_IRQHandler(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <EXTI0_IRQHandler+0x1c>)
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <EXTI0_IRQHandler+0x1c>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[0]();
 800082c:	4b03      	ldr	r3, [pc, #12]	; (800083c <EXTI0_IRQHandler+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4798      	blx	r3
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010400 	.word	0x40010400
 800083c:	20000020 	.word	0x20000020

08000840 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <EXTI1_IRQHandler+0x1c>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <EXTI1_IRQHandler+0x1c>)
 800084a:	f043 0302 	orr.w	r3, r3, #2
 800084e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <EXTI1_IRQHandler+0x20>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	4798      	blx	r3
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40010400 	.word	0x40010400
 8000860:	20000020 	.word	0x20000020

08000864 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <EXTI2_IRQHandler+0x1c>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	4a04      	ldr	r2, [pc, #16]	; (8000880 <EXTI2_IRQHandler+0x1c>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000874:	4b03      	ldr	r3, [pc, #12]	; (8000884 <EXTI2_IRQHandler+0x20>)
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	4798      	blx	r3
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40010400 	.word	0x40010400
 8000884:	20000020 	.word	0x20000020

08000888 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <EXTI3_IRQHandler+0x1c>)
 800088e:	695b      	ldr	r3, [r3, #20]
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <EXTI3_IRQHandler+0x1c>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <EXTI3_IRQHandler+0x20>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	4798      	blx	r3
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40010400 	.word	0x40010400
 80008a8:	20000020 	.word	0x20000020

080008ac <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <EXTI4_IRQHandler+0x1c>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <EXTI4_IRQHandler+0x1c>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <EXTI4_IRQHandler+0x20>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	4798      	blx	r3
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010400 	.word	0x40010400
 80008cc:	20000020 	.word	0x20000020

080008d0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d008      	beq.n	80008f2 <EXTI9_5_IRQHandler+0x22>
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	4a22      	ldr	r2, [pc, #136]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 80008e6:	f043 0320 	orr.w	r3, r3, #32
 80008ea:	6153      	str	r3, [r2, #20]
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <EXTI9_5_IRQHandler+0xa4>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d008      	beq.n	8000910 <EXTI9_5_IRQHandler+0x40>
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <EXTI9_5_IRQHandler+0xa4>)
 800090c:	699b      	ldr	r3, [r3, #24]
 800090e:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000918:	2b00      	cmp	r3, #0
 800091a:	d008      	beq.n	800092e <EXTI9_5_IRQHandler+0x5e>
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 8000922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000926:	6153      	str	r3, [r2, #20]
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <EXTI9_5_IRQHandler+0xa4>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000936:	2b00      	cmp	r3, #0
 8000938:	d008      	beq.n	800094c <EXTI9_5_IRQHandler+0x7c>
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 8000940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000944:	6153      	str	r3, [r2, #20]
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <EXTI9_5_IRQHandler+0xa4>)
 8000948:	6a1b      	ldr	r3, [r3, #32]
 800094a:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000954:	2b00      	cmp	r3, #0
 8000956:	d008      	beq.n	800096a <EXTI9_5_IRQHandler+0x9a>
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a04      	ldr	r2, [pc, #16]	; (8000970 <EXTI9_5_IRQHandler+0xa0>)
 800095e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000962:	6153      	str	r3, [r2, #20]
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <EXTI9_5_IRQHandler+0xa4>)
 8000966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000968:	4798      	blx	r3
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40010400 	.word	0x40010400
 8000974:	20000020 	.word	0x20000020

08000978 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 800097c:	4b2d      	ldr	r3, [pc, #180]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 800097e:	695b      	ldr	r3, [r3, #20]
 8000980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000984:	2b00      	cmp	r3, #0
 8000986:	d008      	beq.n	800099a <EXTI15_10_IRQHandler+0x22>
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	4a29      	ldr	r2, [pc, #164]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 800098e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000992:	6153      	str	r3, [r2, #20]
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <EXTI15_10_IRQHandler+0xc0>)
 8000996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000998:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d008      	beq.n	80009b8 <EXTI15_10_IRQHandler+0x40>
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009b0:	6153      	str	r3, [r2, #20]
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <EXTI15_10_IRQHandler+0xc0>)
 80009b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b6:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 80009b8:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d008      	beq.n	80009d6 <EXTI15_10_IRQHandler+0x5e>
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a1a      	ldr	r2, [pc, #104]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009ce:	6153      	str	r3, [r2, #20]
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <EXTI15_10_IRQHandler+0xc0>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d008      	beq.n	80009f4 <EXTI15_10_IRQHandler+0x7c>
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ec:	6153      	str	r3, [r2, #20]
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <EXTI15_10_IRQHandler+0xc0>)
 80009f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009f2:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d008      	beq.n	8000a12 <EXTI15_10_IRQHandler+0x9a>
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 8000a02:	695b      	ldr	r3, [r3, #20]
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6153      	str	r3, [r2, #20]
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <EXTI15_10_IRQHandler+0xc0>)
 8000a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a10:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) {EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d008      	beq.n	8000a30 <EXTI15_10_IRQHandler+0xb8>
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <EXTI15_10_IRQHandler+0xbc>)
 8000a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a28:	6153      	str	r3, [r2, #20]
 8000a2a:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <EXTI15_10_IRQHandler+0xc0>)
 8000a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a2e:	4798      	blx	r3
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40010400 	.word	0x40010400
 8000a38:	20000020 	.word	0x20000020

08000a3c <CRLH_Postion>:
 */

#include "STM32F103C6_GPIO.h"


uint8_t CRLH_Postion(uint16_t pinNumber){
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber){
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	2b80      	cmp	r3, #128	; 0x80
 8000a4a:	d042      	beq.n	8000ad2 <CRLH_Postion+0x96>
 8000a4c:	2b80      	cmp	r3, #128	; 0x80
 8000a4e:	dc11      	bgt.n	8000a74 <CRLH_Postion+0x38>
 8000a50:	2b08      	cmp	r3, #8
 8000a52:	d036      	beq.n	8000ac2 <CRLH_Postion+0x86>
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	dc06      	bgt.n	8000a66 <CRLH_Postion+0x2a>
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d02e      	beq.n	8000aba <CRLH_Postion+0x7e>
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d02e      	beq.n	8000abe <CRLH_Postion+0x82>
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d028      	beq.n	8000ab6 <CRLH_Postion+0x7a>
 8000a64:	e047      	b.n	8000af6 <CRLH_Postion+0xba>
 8000a66:	2b20      	cmp	r3, #32
 8000a68:	d02f      	beq.n	8000aca <CRLH_Postion+0x8e>
 8000a6a:	2b40      	cmp	r3, #64	; 0x40
 8000a6c:	d02f      	beq.n	8000ace <CRLH_Postion+0x92>
 8000a6e:	2b10      	cmp	r3, #16
 8000a70:	d029      	beq.n	8000ac6 <CRLH_Postion+0x8a>
 8000a72:	e040      	b.n	8000af6 <CRLH_Postion+0xba>
 8000a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a78:	d033      	beq.n	8000ae2 <CRLH_Postion+0xa6>
 8000a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a7e:	dc09      	bgt.n	8000a94 <CRLH_Postion+0x58>
 8000a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a84:	d029      	beq.n	8000ada <CRLH_Postion+0x9e>
 8000a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a8a:	d028      	beq.n	8000ade <CRLH_Postion+0xa2>
 8000a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a90:	d021      	beq.n	8000ad6 <CRLH_Postion+0x9a>
 8000a92:	e030      	b.n	8000af6 <CRLH_Postion+0xba>
 8000a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a98:	d027      	beq.n	8000aea <CRLH_Postion+0xae>
 8000a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a9e:	dc03      	bgt.n	8000aa8 <CRLH_Postion+0x6c>
 8000aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aa4:	d01f      	beq.n	8000ae6 <CRLH_Postion+0xaa>
 8000aa6:	e026      	b.n	8000af6 <CRLH_Postion+0xba>
 8000aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000aac:	d01f      	beq.n	8000aee <CRLH_Postion+0xb2>
 8000aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ab2:	d01e      	beq.n	8000af2 <CRLH_Postion+0xb6>
 8000ab4:	e01f      	b.n	8000af6 <CRLH_Postion+0xba>
	case GPIO_PIN_0:
		return 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e01d      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_1:
		return 4;
 8000aba:	2304      	movs	r3, #4
 8000abc:	e01b      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_2:
		return 8;
 8000abe:	2308      	movs	r3, #8
 8000ac0:	e019      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_3:
		return 12;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	e017      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_4:
		return 16;
 8000ac6:	2310      	movs	r3, #16
 8000ac8:	e015      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_5:
		return 20;
 8000aca:	2314      	movs	r3, #20
 8000acc:	e013      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_6:
		return 24;
 8000ace:	2318      	movs	r3, #24
 8000ad0:	e011      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_7:
		return 28;
 8000ad2:	231c      	movs	r3, #28
 8000ad4:	e00f      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_8:
		return 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e00d      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_9:
		return 4;
 8000ada:	2304      	movs	r3, #4
 8000adc:	e00b      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_10:
		return 8;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	e009      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_11:
		return 12;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	e007      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_12:
		return 16;
 8000ae6:	2310      	movs	r3, #16
 8000ae8:	e005      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_13:
		return 20;
 8000aea:	2314      	movs	r3, #20
 8000aec:	e003      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_14:
		return 24;
 8000aee:	2318      	movs	r3, #24
 8000af0:	e001      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	case GPIO_PIN_15:
		return 28;
 8000af2:	231c      	movs	r3, #28
 8000af4:	e7ff      	b.n	8000af6 <CRLH_Postion+0xba>
		break;
	return 0;
	}
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <MCAL_GPIO_Init>:
	 *             pinConfig: Pointer to structure containing pin configuration settings.
	 *@retval    - None
	 *@Note      - in LQFP package A,B fully included..  C,D parital included.. E,F,G not included..
   ================================================================
	 */
	void MCAL_GPIO_Init  (GPIO_t* GPIOx, GPIO_pinConfig_t* pinConfig){
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
		// select between CRL or CRH, if pin 0->7 choose CRL else: Choose CRH
		volatile uint32_t *configReg = (pinConfig->GPIO_pinNumber < GPIO_PIN_8)? &(GPIOx->CRL):&(GPIOx->CRH);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	2bff      	cmp	r3, #255	; 0xff
 8000b10:	d801      	bhi.n	8000b16 <MCAL_GPIO_Init+0x16>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	e001      	b.n	8000b1a <MCAL_GPIO_Init+0x1a>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3304      	adds	r3, #4
 8000b1a:	60bb      	str	r3, [r7, #8]
		// clear CNF[1:0] MODE[1:0]
		*(configReg) &= ~(0xF << CRLH_Postion(pinConfig->GPIO_pinNumber));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ff8b 	bl	8000a3c <CRLH_Postion>
 8000b26:	4603      	mov	r3, r0
 8000b28:	461a      	mov	r2, r3
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	4093      	lsls	r3, r2
 8000b2e:	43da      	mvns	r2, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	401a      	ands	r2, r3
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	601a      	str	r2, [r3, #0]
		//pin_config to store CNF[1:0] MODE[1:0] for selected pin
		uint8_t pin_config = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	73fb      	strb	r3, [r7, #15]
		// if output mode
		if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD|| pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD){
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	789b      	ldrb	r3, [r3, #2]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	d00b      	beq.n	8000b5e <MCAL_GPIO_Init+0x5e>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	789b      	ldrb	r3, [r3, #2]
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d007      	beq.n	8000b5e <MCAL_GPIO_Init+0x5e>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	789b      	ldrb	r3, [r3, #2]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	d003      	beq.n	8000b5e <MCAL_GPIO_Init+0x5e>
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	789b      	ldrb	r3, [r3, #2]
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	d10e      	bne.n	8000b7c <MCAL_GPIO_Init+0x7c>
			pin_config = ((((pinConfig->GPIO_MODE-5) << 2) | (pinConfig->GPIO_Output_Speed)) & 0x0F);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	789b      	ldrb	r3, [r3, #2]
 8000b62:	3b05      	subs	r3, #5
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	b25a      	sxtb	r2, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	78db      	ldrb	r3, [r3, #3]
 8000b6c:	b25b      	sxtb	r3, r3
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f003 030f 	and.w	r3, r3, #15
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e02d      	b.n	8000bd8 <MCAL_GPIO_Init+0xd8>
		}
		// if input mode
		// Mode 00: input mode (reset state)
		else{
			if(pinConfig->GPIO_MODE == GPIO_MODE_ANALOG || pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO)
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	789b      	ldrb	r3, [r3, #2]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <MCAL_GPIO_Init+0x8c>
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	789b      	ldrb	r3, [r3, #2]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d104      	bne.n	8000b96 <MCAL_GPIO_Init+0x96>
			{
				pin_config = (pinConfig->GPIO_MODE << 2);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	789b      	ldrb	r3, [r3, #2]
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e020      	b.n	8000bd8 <MCAL_GPIO_Init+0xd8>
			}
			else if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	789b      	ldrb	r3, [r3, #2]
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d102      	bne.n	8000ba4 <MCAL_GPIO_Init+0xa4>
			{
				pin_config =  (GPIO_MODE_INPUT_FLO << 2);
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	73fb      	strb	r3, [r7, #15]
 8000ba2:	e019      	b.n	8000bd8 <MCAL_GPIO_Init+0xd8>
			}
			else{//GPIO_MODE_PU or GPIO_MODE_PD
				pin_config = (GPIO_MODE_INPUT_PU <<2);
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	73fb      	strb	r3, [r7, #15]
				if (pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	789b      	ldrb	r3, [r3, #2]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	d107      	bne.n	8000bc0 <MCAL_GPIO_Init+0xc0>
				{
					GPIOx->ODR |= pinConfig->GPIO_pinNumber;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	8812      	ldrh	r2, [r2, #0]
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	e00b      	b.n	8000bd8 <MCAL_GPIO_Init+0xd8>
				}
				else if (pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PD)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	789b      	ldrb	r3, [r3, #2]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d107      	bne.n	8000bd8 <MCAL_GPIO_Init+0xd8>
				{
					GPIOx->ODR &= ~(pinConfig->GPIO_pinNumber);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	683a      	ldr	r2, [r7, #0]
 8000bce:	8812      	ldrh	r2, [r2, #0]
 8000bd0:	43d2      	mvns	r2, r2
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	60da      	str	r2, [r3, #12]
				}
			}

		}
		//write on CRL or CRH
		*(configReg) |= (pin_config << CRLH_Postion(pinConfig->GPIO_pinNumber));
 8000bd8:	7bfc      	ldrb	r4, [r7, #15]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff2c 	bl	8000a3c <CRLH_Postion>
 8000be4:	4603      	mov	r3, r0
 8000be6:	fa04 f203 	lsl.w	r2, r4, r3
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	431a      	orrs	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	601a      	str	r2, [r3, #0]
	}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd90      	pop	{r4, r7, pc}

08000bfc <MCAL_GPIO_WritePin>:
	 *             value: Value to be written to the pin (0 or 1).
	 *@retval    - None
	 *@Note      -
   ================================================================
	 */
	void MCAL_GPIO_WritePin(GPIO_t* GPIOx, uint16_t pinNumber, uint8_t value){
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	707b      	strb	r3, [r7, #1]
		if(value == GPIO_PIN_RESET){
 8000c0c:	787b      	ldrb	r3, [r7, #1]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d107      	bne.n	8000c22 <MCAL_GPIO_WritePin+0x26>
			GPIOx->ODR &= ~(pinNumber);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	60da      	str	r2, [r3, #12]
		}
		else{
			GPIOx->ODR |=  (pinNumber);
		}

	}
 8000c20:	e005      	b.n	8000c2e <MCAL_GPIO_WritePin+0x32>
			GPIOx->ODR |=  (pinNumber);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68da      	ldr	r2, [r3, #12]
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60da      	str	r2, [r3, #12]
	}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <MCAL_GPIO_WritePort>:
	 *             value: 16-bit value to be written to the port.
	 *@retval    - None
	 *@Note      - The value parameter corresponds to the states of all pins in the port.
   ================================================================
	 */
	void MCAL_GPIO_WritePort(GPIO_t* GPIOx,uint16_t value){ //value uint16 because we have 16 pin in port
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	807b      	strh	r3, [r7, #2]
		GPIOx->ODR = (uint16_t)value;
 8000c44:	887a      	ldrh	r2, [r7, #2]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60da      	str	r2, [r3, #12]
	}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <wait>:
#include "STM32F103C6_EXTI.h"

uint8_t IRQ_FLAG;

void wait(uint32_t time)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	uint32_t i , j;

	for( i=0 ; i<time ; i++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	e00b      	b.n	8000c7a <wait+0x26>
		for(j=0 ; j<255 ; j++);
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	e002      	b.n	8000c6e <wait+0x1a>
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	2bfe      	cmp	r3, #254	; 0xfe
 8000c72:	d9f9      	bls.n	8000c68 <wait+0x14>
	for( i=0 ; i<time ; i++)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	3301      	adds	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d3ef      	bcc.n	8000c62 <wait+0xe>
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <clk_init>:

//clk configuration
void clk_init()
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <clk_init+0x30>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <clk_init+0x30>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000c9c:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <clk_init+0x30>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <clk_init+0x30>)
 8000ca2:	f043 0308 	orr.w	r3, r3, #8
 8000ca6:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <clk_init+0x30>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <clk_init+0x30>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6193      	str	r3, [r2, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <EXTI_CallBack>:

void EXTI_CallBack(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	IRQ_FLAG = 1;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <EXTI_CallBack+0x20>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
	LCD_Clear_screen();
 8000cca:	f7ff fba3 	bl	8000414 <LCD_Clear_screen>
	LCD_write_string("IRQ EXTI9 is happend.");
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <EXTI_CallBack+0x24>)
 8000cd0:	f7ff fb6e 	bl	80003b0 <LCD_write_string>
	wait(500);
 8000cd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd8:	f7ff ffbc 	bl	8000c54 <wait>

}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000005c 	.word	0x2000005c
 8000ce4:	08000df8 	.word	0x08000df8

08000ce8 <main>:


int main(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

	clk_init();
 8000cee:	f7ff ffcd 	bl	8000c8c <clk_init>
	LCD_INIT();
 8000cf2:	f7ff fa59 	bl	80001a8 <LCD_INIT>
	LCD_Clear_screen();
 8000cf6:	f7ff fb8d 	bl	8000414 <LCD_Clear_screen>
	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <main+0x4c>)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_Rising;
 8000d04:	2300      	movs	r3, #0
 8000d06:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI_CallBack;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <main+0x50>)
 8000d0a:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN =EXTI_IRQ_Enable;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	747b      	strb	r3, [r7, #17]
	MCAL_EXTI_Init(&EXTI_CFG);
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fd76 	bl	8000804 <MCAL_EXTI_Init>
	IRQ_FLAG = 1;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <main+0x54>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	701a      	strb	r2, [r3, #0]
//		if(IRQ_FLAG == 1)
//		{
//			LCD_Clear_screen();
//			IRQ_FLAG = 0;
//		}
		wait(500);
 8000d1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d22:	f7ff ff97 	bl	8000c54 <wait>
		LCD_Clear_screen();
 8000d26:	f7ff fb75 	bl	8000414 <LCD_Clear_screen>
		LCD_write_string("LCD Ready");
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <main+0x58>)
 8000d2c:	f7ff fb40 	bl	80003b0 <LCD_write_string>
		wait(500);
 8000d30:	e7f5      	b.n	8000d1e <main+0x36>
 8000d32:	bf00      	nop
 8000d34:	08000e1c 	.word	0x08000e1c
 8000d38:	08000cc1 	.word	0x08000cc1
 8000d3c:	2000005c 	.word	0x2000005c
 8000d40:	08000e10 	.word	0x08000e10

08000d44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d46:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d48:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d4c:	480c      	ldr	r0, [pc, #48]	; (8000d80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d4e:	490d      	ldr	r1, [pc, #52]	; (8000d84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <LoopForever+0xe>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d54:	e002      	b.n	8000d5c <LoopCopyDataInit>

08000d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5a:	3304      	adds	r3, #4

08000d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d60:	d3f9      	bcc.n	8000d56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d64:	4c0a      	ldr	r4, [pc, #40]	; (8000d90 <LoopForever+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d68:	e001      	b.n	8000d6e <LoopFillZerobss>

08000d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d6c:	3204      	adds	r2, #4

08000d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d70:	d3fb      	bcc.n	8000d6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d72:	f000 f811 	bl	8000d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d76:	f7ff ffb7 	bl	8000ce8 <main>

08000d7a <LoopForever>:

LoopForever:
    b LoopForever
 8000d7a:	e7fe      	b.n	8000d7a <LoopForever>
  ldr   r0, =_estack
 8000d7c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d84:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d88:	08000e30 	.word	0x08000e30
  ldr r2, =_sbss
 8000d8c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d90:	20000060 	.word	0x20000060

08000d94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d94:	e7fe      	b.n	8000d94 <ADC1_2_IRQHandler>
	...

08000d98 <__libc_init_array>:
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	2500      	movs	r5, #0
 8000d9c:	4e0c      	ldr	r6, [pc, #48]	; (8000dd0 <__libc_init_array+0x38>)
 8000d9e:	4c0d      	ldr	r4, [pc, #52]	; (8000dd4 <__libc_init_array+0x3c>)
 8000da0:	1ba4      	subs	r4, r4, r6
 8000da2:	10a4      	asrs	r4, r4, #2
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	d109      	bne.n	8000dbc <__libc_init_array+0x24>
 8000da8:	f000 f81a 	bl	8000de0 <_init>
 8000dac:	2500      	movs	r5, #0
 8000dae:	4e0a      	ldr	r6, [pc, #40]	; (8000dd8 <__libc_init_array+0x40>)
 8000db0:	4c0a      	ldr	r4, [pc, #40]	; (8000ddc <__libc_init_array+0x44>)
 8000db2:	1ba4      	subs	r4, r4, r6
 8000db4:	10a4      	asrs	r4, r4, #2
 8000db6:	42a5      	cmp	r5, r4
 8000db8:	d105      	bne.n	8000dc6 <__libc_init_array+0x2e>
 8000dba:	bd70      	pop	{r4, r5, r6, pc}
 8000dbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc0:	4798      	blx	r3
 8000dc2:	3501      	adds	r5, #1
 8000dc4:	e7ee      	b.n	8000da4 <__libc_init_array+0xc>
 8000dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dca:	4798      	blx	r3
 8000dcc:	3501      	adds	r5, #1
 8000dce:	e7f2      	b.n	8000db6 <__libc_init_array+0x1e>
 8000dd0:	08000e28 	.word	0x08000e28
 8000dd4:	08000e28 	.word	0x08000e28
 8000dd8:	08000e28 	.word	0x08000e28
 8000ddc:	08000e2c 	.word	0x08000e2c

08000de0 <_init>:
 8000de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de2:	bf00      	nop
 8000de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000de6:	bc08      	pop	{r3}
 8000de8:	469e      	mov	lr, r3
 8000dea:	4770      	bx	lr

08000dec <_fini>:
 8000dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dee:	bf00      	nop
 8000df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000df2:	bc08      	pop	{r3}
 8000df4:	469e      	mov	lr, r3
 8000df6:	4770      	bx	lr
