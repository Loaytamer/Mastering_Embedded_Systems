
WDOG.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066a  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059d  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00000dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001064  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000013eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <WDT_ON>:
#define LED_DDR  DDRD
#define LED_PORT PORTD
#define LED_PIN	 0

void WDT_ON(){
	SET_BIT(WDTCR, WDE);
  6c:	81 b5       	in	r24, 0x21	; 33
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR, WDP1);
  72:	81 b5       	in	r24, 0x21	; 33
  74:	82 60       	ori	r24, 0x02	; 2
  76:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR, WDP2);
  78:	81 b5       	in	r24, 0x21	; 33
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	81 bd       	out	0x21, r24	; 33
  7e:	08 95       	ret

00000080 <WDT_OFF>:
}

void WDT_OFF(){
	SET_BIT(WDTCR, WDE);
  80:	81 b5       	in	r24, 0x21	; 33
  82:	88 60       	ori	r24, 0x08	; 8
  84:	81 bd       	out	0x21, r24	; 33
	SET_BIT(WDTCR, WDTOE);
  86:	81 b5       	in	r24, 0x21	; 33
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	81 bd       	out	0x21, r24	; 33
	WDTCR =0x00;
  8c:	11 bc       	out	0x21, r1	; 33
  8e:	08 95       	ret

00000090 <main>:
}

int main(void)
{
    SET_BIT(LED_DDR, LED_PIN);
  90:	81 b3       	in	r24, 0x11	; 17
  92:	81 60       	ori	r24, 0x01	; 1
  94:	81 bb       	out	0x11, r24	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	83 ec       	ldi	r24, 0xC3	; 195
  9a:	99 e0       	ldi	r25, 0x09	; 9
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0xc>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x16>
  a6:	00 00       	nop
	_delay_ms(400);
    while (1) 
    {
		WDT_ON();
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <WDT_ON>
		TOG_BIT(LED_PORT,LED_PIN);
  ac:	92 b3       	in	r25, 0x12	; 18
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	89 27       	eor	r24, r25
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	89 e6       	ldi	r24, 0x69	; 105
  b8:	98 e1       	ldi	r25, 0x18	; 24
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x2a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x34>
  c4:	00 00       	nop
		_delay_ms(1000);
		WDT_OFF();
  c6:	0e 94 40 00 	call	0x80	; 0x80 <WDT_OFF>
  ca:	ee cf       	rjmp	.-36     	; 0xa8 <main+0x18>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
