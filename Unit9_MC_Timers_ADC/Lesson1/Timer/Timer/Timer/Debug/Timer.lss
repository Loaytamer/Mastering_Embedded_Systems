
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b5b  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ec  00000000  00000000  00000ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000487  00000000  00000000  000015af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00001a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  00001be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000341  00000000  00000000  0000216e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000024af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_10>
  2c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 42 00 	call	0x84	; 0x84 <main>
  74:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TOIE_Callback>:

extern uint8_t u8_TOVNumber;

void TOIE_Callback()
{
	PORTA = ~PORTA;
  7c:	8b b3       	in	r24, 0x1b	; 27
  7e:	80 95       	com	r24
  80:	8b bb       	out	0x1b, r24	; 27
  82:	08 95       	ret

00000084 <main>:
}

int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x6>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0x8>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
    DDRA = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a bb       	out	0x1a, r24	; 26
    sei();
  94:	78 94       	sei
    TIMER0_CALLBACK_CompareMatch_INT(TOIE_Callback);
  96:	8e e3       	ldi	r24, 0x3E	; 62
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 99 00 	call	0x132	; 0x132 <TIMER0_CALLBACK_CompareMatch_INT>
    S_TIMER0_CONFIG config = {CTC, OCIE_ENABLE, TOIE_DISABLE, PRESCALING_CLK8};
  9e:	88 e0       	ldi	r24, 0x08	; 8
  a0:	89 83       	std	Y+1, r24	; 0x01
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	8a 83       	std	Y+2, r24	; 0x02
  a6:	1b 82       	std	Y+3, r1	; 0x03
  a8:	8c 83       	std	Y+4, r24	; 0x04
    TIMER0_SetCompareVal(0xF0);
  aa:	80 ef       	ldi	r24, 0xF0	; 240
  ac:	0e 94 96 00 	call	0x12c	; 0x12c <TIMER0_SetCompareVal>
    TIMER0_INIT(&config);
  b0:	ce 01       	movw	r24, r28
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	0e 94 5d 00 	call	0xba	; 0xba <TIMER0_INIT>
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <main+0x34>

000000ba <TIMER0_INIT>:
	TOV_Number  = ticksNumber;
	return Retval;
}

void TIMER0_CALLBACK_Overflow_INT(ptr_voidFunVoid_t callback){
	callBack_OVF = callback;
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	99 f1       	breq	.+102    	; 0x124 <TIMER0_INIT+0x6a>
  be:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <TIMER0_Configuration+0x1>
  c2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <TIMER0_Configuration>
  c6:	fc 01       	movw	r30, r24
  c8:	80 81       	ld	r24, Z
  ca:	88 23       	and	r24, r24
  cc:	31 f0       	breq	.+12     	; 0xda <TIMER0_INIT+0x20>
  ce:	80 34       	cpi	r24, 0x40	; 64
  d0:	21 f0       	breq	.+8      	; 0xda <TIMER0_INIT+0x20>
  d2:	88 30       	cpi	r24, 0x08	; 8
  d4:	11 f0       	breq	.+4      	; 0xda <TIMER0_INIT+0x20>
  d6:	88 34       	cpi	r24, 0x48	; 72
  d8:	19 f4       	brne	.+6      	; 0xe0 <TIMER0_INIT+0x26>
  da:	93 b7       	in	r25, 0x33	; 51
  dc:	89 2b       	or	r24, r25
  de:	83 bf       	out	0x33, r24	; 51
  e0:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_Configuration>
  e4:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_Configuration+0x1>
  e8:	83 81       	ldd	r24, Z+3	; 0x03
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	18 f4       	brcc	.+6      	; 0xf4 <TIMER0_INIT+0x3a>
  ee:	93 b7       	in	r25, 0x33	; 51
  f0:	89 2b       	or	r24, r25
  f2:	83 bf       	out	0x33, r24	; 51
  f4:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_Configuration>
  f8:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_Configuration+0x1>
  fc:	81 81       	ldd	r24, Z+1	; 0x01
  fe:	88 23       	and	r24, r24
 100:	11 f0       	breq	.+4      	; 0x106 <TIMER0_INIT+0x4c>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	19 f4       	brne	.+6      	; 0x10c <TIMER0_INIT+0x52>
 106:	99 b7       	in	r25, 0x39	; 57
 108:	89 2b       	or	r24, r25
 10a:	89 bf       	out	0x39, r24	; 57
 10c:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_Configuration>
 110:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_Configuration+0x1>
 114:	82 81       	ldd	r24, Z+2	; 0x02
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	38 f4       	brcc	.+14     	; 0x128 <TIMER0_INIT+0x6e>
 11a:	99 b7       	in	r25, 0x39	; 57
 11c:	89 2b       	or	r24, r25
 11e:	89 bf       	out	0x39, r24	; 57
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	08 95       	ret
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	08 95       	ret

0000012c <TIMER0_SetCompareVal>:
 12c:	8c bf       	out	0x3c, r24	; 60
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret

00000132 <TIMER0_CALLBACK_CompareMatch_INT>:
}
void TIMER0_CALLBACK_CompareMatch_INT(ptr_voidFunVoid_t callback){
	callBack_CM = callback;
 132:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <callBack_CM+0x1>
 136:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <callBack_CM>
 13a:	08 95       	ret

0000013c <__vector_10>:
}

ISR(TIMER0_COMP_vect)
{
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	callBack_CM();
 15e:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <callBack_CM>
 162:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <callBack_CM+0x1>
 166:	09 95       	icall
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	TOV_Number++;
 1ac:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <TOV_Number>
 1b0:	8f 5f       	subi	r24, 0xFF	; 255
 1b2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <TOV_Number>
	callBack_OVF();
 1b6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ba:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1be:	09 95       	icall
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
